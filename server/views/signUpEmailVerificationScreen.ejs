<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CapybaraComments - SignUp</title>
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Capybara Downloader - Download youtube videos and audios and etc." />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="apple-touch-icon" sizes="180x180" href="favicon_io/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon_io/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon_io/favicon-16x16.png">
    <link rel="manifest" href="favicon_io/site.webmanifest">

    <style nonce="<%= nonce %>">
        @import url('https://fonts.googleapis.com/css2?family=Leckerli+One&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Jua&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@700&family=Jua&display=swap');

        :root {
            --scale: 1;
        }

        body {
            overflow-x: hidden;
            background-color: #1E1E1E;
            font-family: Jua;
        }

        .login-container {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .login-container h1 {
            color: orange;
            font-family: Jua;
        }

        .message-pop {
            position: fixed;
            z-index: 1000;
            background-color: orange;
            min-width: 300px;
            top: 0%;
            left: 50%;
            transform: translate(-50%, 10%);
            padding: 10px;
            padding-top: 0%;
            border: 5px solid #000000;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .cross-btn {
            font-size: large;
            background-color: red;
            font-weight: 900;
            border-bottom-left-radius: 30px;
            border-bottom-right-radius: 30px;
        }

        .cross-btn-container {
            width: 100%;
            display: flex;
            justify-content: end;
            align-items: end;
        }

        .message-pop .message {
            color: black;
            font-size: medium;
            word-wrap: break-word;
        }

        .message-pop-inner-container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            gap: 2px;
            color: black;
            font-size: x-large;
        }

        .verificationCard {
            width: 500px;
            gap: 20px;

        }

        .flex-column-and-centered {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .verification-code-inputs {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: row;
            gap: 10px;
        }

        .verification-code-inputs input {
            width: 60px;
            padding: 10px;
            text-align: center;
            font-size: x-large;
        }

        #email-verifying-form {
            gap: 40px;
        }

        .verificationCardMessage {
            color: white;
            text-align: center;
        }

        .resendContainer {
            display: flex;
            justify-content: center;
            text-align: center;
            align-items: center;
            flex-direction: column;
            width: 100%;
            color: white;
        }

        .resendContainer button {
            width: 120px;
        }

        .verifyBtn {
            position: relative;
            font-size: large;
            font-family: Jua;
            width: 100px;
            color: black;
            border: none;
            background-color: black;
            padding: 5px;
            box-shadow: 0px 0px 0px 5px orange;
            border-radius: 30px;
            overflow: hidden;
        }

        .verifyBtn::after {
            position: absolute;
            content: 'Verify';
            width: 100%;
            height: 100%;
            transform: scale(var(--scale));
            top: 0;
            left: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: orange;
            border-radius: 30px;

        }

        .forget-password-form-footer-btn {
            color: orange;
            background-color: transparent;
            border: none;
            padding: 0;
        }

        .forget-password-form-footer-links {
            color: orange;
        }

        .vc-form-footer {
            gap: 20px;
        }

        #editEmailBtn:hover {
            color: white;
        }

        .dis-none {
            display: none !important;
        }

        @media screen and (max-width:500px) {
            .verificationCard{
                background-color: red;
                width: 100%;
            }

            .verification-code-inputs input{
                width: 30px;
                padding: 0%;
            }
        }
    </style>
</head>

<body>

    <div class="container login-container">

        <div class="verificationCard flex-column-and-centered">
            <h1>Enter Verification Code</h1>
            <p class='verificationCardMessage'>
                Please enter the verification code that<br />has been sent to your email address
            </p>
            <form id="email-verifying-form" class="flex-column-and-centered">
                <div class="verification-code-inputs">
                    <input type="text" class="inputBoxes ta-center" id="inputBox1" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox2" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox3" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox4" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox5" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox6" maxlength="1" minlength="1" required>
                </div>
                <button type='submit' class='verifyBtn'>Verify</button>
            </form>

            <div class="resendContainer">
                <div class="resendCodeMessage">
                    <p>Verification Code is valid for only 15 Minutes. And you can ask for new verification code in
                        every 30 seconds</p>
                </div>
                <button disabled type="button" id='resendCodeBtn'>Resend Code</button>
            </div>

            <div class='vc-form-footer d-flex flex-row justify-content-center align-items-center'>
                <a href="/privacy-policy" target="_blank"
                    class='forget-password-form-footer-links text-decoration-none'>Privacy
                    Policy</a>
                <button type="button" id="goBackBtn" class='forget-password-form-footer-btn text-decoration-none'>Go
                    Back</button>
            </div>
        </div>

    </div>

    <div class="message-pop dis-none">
        <div class="cross-btn-container">
            <button type="button" class="cross-btn">âœ—</button>
        </div>
        <div class="message-pop-inner-container">
            <div class="head">Uh oh!</div>
            <div class="message"></div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
        </script>

    <script nonce="<%= nonce %>">
        const hostURL = 'http://localhost:5000'
        const message_pop = document.querySelector('.message-pop');
        const cross_btn = document.querySelector('.cross-btn');

        function show_message_pop(bool, msg = '') {
            if (bool) {
                message_pop.classList.remove('dis-none');
                const message = document.querySelector('.message');
                message.textContent = msg;
            }
            else {
                message_pop.classList.add('dis-none');
            }
        }

        if (cross_btn) {
            cross_btn.addEventListener('click', (e) => {
                if (message_pop) { message_pop.classList.add('dis-none') }
            });
        }


        const verifyBtn = document.querySelector('.verifyBtn');
        if (verifyBtn) {
            verifyBtn.addEventListener('mousedown', (e) => {
                const root = document.querySelector(':root');
                root.style.setProperty('--scale', '0.9');
            })

            verifyBtn.addEventListener('mouseup', (e) => {
                const root = document.querySelector(':root');
                root.style.setProperty('--scale', '1');
            })
        }

        const inputBoxes = document.querySelectorAll('.inputBoxes');
        if (inputBoxes) {
            inputBoxes.forEach(function (inputBox, index) {
                inputBox.addEventListener('paste', function (e) {
                    e.preventDefault();
                    const pastedText = e.clipboardData.getData('text');
                    console.log(pastedText);
                    distributeCode(pastedText);
                });

                inputBox.addEventListener('input', function (e) {
                    handleInput(e.target, index);
                });
            });

            function distributeCode(code) {
                // Distribute the code among the input boxes
                for (let i = 0; i < inputBoxes.length; i++) {
                    inputBoxes[i].value = code[i] || '';
                }

                // Move cursor to the next input box
                const nextIndex = currentIndex + 1;
                if (nextIndex < inputBoxes.length) {
                    inputBoxes[nextIndex].focus();
                }
            }

            function handleInput(inputBox, currentIndex) {
                // Move cursor to the next input box after typing
                const nextIndex = currentIndex + 1;
                if (nextIndex < inputBoxes.length && inputBox.value) {
                    inputBoxes[nextIndex].focus();
                }
            }
        }

        const goBackBtn = document.getElementById('goBackBtn');
        if (goBackBtn) {
            goBackBtn.addEventListener('click', (e) => {
                window.location.href = "/home"
            });
        }


        const form = document.getElementById('email-verifying-form');

        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                let code = '';
                document.querySelectorAll('.inputBoxes').forEach((ele) => {
                    code += ele.value;
                });

                console.log(code);
                await sendEmailVerification(code);
            })
        }

        async function sendEmailVerification(verificationCode) {
            if (!verificationCode) {
                show_message_pop(true, 'Code is not provided. Please enter valid verification code');
                return;
            }

            try {
                const parameter = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        "verificationCode": verificationCode
                    })
                }

                await fetch(`${hostURL}/api/v1/auth/verifyEmail`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            }
                            else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }

                        window.location.href = '/home';

                    }).catch((error) => {
                        show_message_pop(true, 'Error on reading response from server.');
                        console.log('verifyEmail:', error);
                    });

            } catch (error) {
                show_message_pop(true, 'Error on sending request for verifyEmail.');
                console.log('verifyEmail:', error);
            }
        }

        function enableResendCodeAfter30Seconds() {
            setTimeout(() => {
                const resendCodeBtn = document.getElementById('resendCodeBtn');
                if (resendCodeBtn) {
                    resendCodeBtn.removeAttribute('disabled');
                }
            }, 3000)
        }

        const resendCodeBtn = document.getElementById('resendCodeBtn');
        if (resendCodeBtn) {
            resendCodeBtn.onclick = async (e) => {
                resendCodeBtn.setAttribute('disabled', true);
                enableResendCodeAfter30Seconds();
                await resendCode();
            }
        }

        async function resendCode() {
            try {
                const parameter = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                }

                await fetch(`${hostURL}/api/v1/auth/resendCode`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error && res.error.msg) {
                            show_message_pop(true, res.error.msg);
                            return;
                        }

                        const message_head = document.querySelector('.head');
                       if(message_head){
                         message_head.textContent = 'Mail Sent';
                       }
                       show_message_pop(true, 'Code sended at your email successfully');

                    }).catch((error) => {
                        show_message_pop(true, 'Error on reading response from server.');
                        console.log('resendCode:', error);
                    });

            } catch (error) {
                show_message_pop(true, 'Error on sending request for resendCode.');
                console.log('resendCode:', error);
            }
        }

        enableResendCodeAfter30Seconds();
    </script>
</body>

</html>