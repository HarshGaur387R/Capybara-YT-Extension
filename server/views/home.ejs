<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CapybaraComments - Home</title>
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Capybara Downloader - Download youtube videos and audios and etc." />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous" />
    <link rel="apple-touch-icon" sizes="180x180" href="favicon_io/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="favicon_io/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="favicon_io/favicon-16x16.png" />
    <link rel="manifest" href="favicon_io/site.webmanifest" />
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="css/home.css">
</head>

<body>
    <main class="flex-row d-flex justify-content-center align-items-center">
        <nav class="responsive-nav-bar-container">
            <span class="material-symbols-outlined menu-btn-respo">
                menu
            </span>
        </nav>

        <nav class="responsive-nav-bar">
            <div class="logo pt-5">Capybara</div>
            <ul class="navbar-list text-center">
                <li><a href="/home">Home</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/dashboard">Dashboard</a></li>
                <li><a href="/contact">Contact</a></li>
            </ul>
            <div class="logout-btn d-flex justify-content-center align-items-center pb-5">
                <button type="button">Logout</button>
                <span class="material-symbols-outlined">move_item</span>
            </div>
        </nav>

        <nav class="navigation-bar">
            <div class="logo pt-5">Capybara</div>
            <ul class="navbar-list text-center">
                <li><a href="/home">Home</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/dashboard">Dashboard</a></li>
                <li><a href="/contact">Contact</a></li>
            </ul>
            <div class="logout-btn d-flex justify-content-center align-items-center pb-5">
                <button type="button">Logout</button>
                <span class="material-symbols-outlined">move_item</span>
            </div>
        </nav>
        <section class="d-flex justify-content-center align-items-center flex-column">
            <h1 class="text-center">
                Welcome <br />
                To <span>Capybara</span>
            </h1>

            <div class="text-center msg">
                Access Key stay valid as long as you want. <br />
                You can generate new key by clicking on generate button
            </div>

            <div class="capy-input-container d-flex justify-content-center align-items-center flex-row">
                <input type="text" readonly placeholder="ex: Ajeai3i3daIdjasa90jaen.asdom3024jq921k..." />
                <span class="material-symbols-outlined copy-btn">content_copy</span>
            </div>

            <button id="generate-btn" type="button" class="my-2">
                Generate Key
            </button>

            <a href="/extension.zip" download="capybara-extension">Download Extension?</a>
        </section>
    </main>

    <div class="message-pop dis-none">
        <div class="cross-btn-container">
            <button type="button" class="cross-btn">âœ—</button>
        </div>
        <div class="message-pop-inner-container">
            <div class="head">Uh oh!</div>
            <div class="message"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>

    <script nonce="<%= nonce %>">
        const hostURL = "http://localhost:5000";

        const menu_btn_respo = document.querySelector('.menu-btn-respo');
        const responsive_nav_bar = document.querySelector('.responsive-nav-bar');
        const responsive_nav_bar_container = document.querySelector('.responsive-nav-bar-container');

        if (menu_btn_respo) {
            menu_btn_respo.onclick = (e) => {
                if (responsive_nav_bar.style.display === 'none') {
                    responsive_nav_bar.style.display = 'flex';
                    responsive_nav_bar.style.top = '45px'
                    responsive_nav_bar_container.style.display = 'block';
                }
                else {
                    responsive_nav_bar.style.display = 'none';
                    responsive_nav_bar.style.top = '-9000px'
                    responsive_nav_bar_container.style.display = 'none';
                }
            }
        }

        const input = document.querySelector(".capy-input-container input");
        const generate_btn = document.getElementById("generate-btn");
        const copy_btn = document.querySelector(".copy-btn");

        if (generate_btn) {
            generate_btn.onclick = async (e) => {
                generate_btn.disabled = true;
                await generateAccessKey();
            };
        }

        if (copy_btn) {
            copy_btn.onclick = (e) => {
                input.select();
                document.execCommand("copy");
                alert("Copied to clipboard!");
            };
        }

        function addColorClassToAnchor() {
            const anchors = document.querySelectorAll(".navbar-list a");
            const currentUrl = window.location.pathname;

            anchors.forEach((anchor) => {
                if (anchor.getAttribute("href") === currentUrl) {
                    anchor.classList.add("color-orange");
                }
            });
        }

        document.addEventListener("DOMContentLoaded", addColorClassToAnchor);

        const message_pop = document.querySelector(".message-pop");
        const cross_btn = document.querySelector(".cross-btn");

        if (cross_btn) {
            cross_btn.addEventListener("click", (e) => {
                if (message_pop) {
                    message_pop.classList.add("dis-none");
                }
            });
        }

        function show_message_pop(bool, msg = "") {
            if (bool) {
                message_pop.classList.remove("dis-none");
                const message = document.querySelector(".message");
                message.textContent = msg;
            } else {
                message_pop.classList.add("dis-none");
            }
        }

        document.addEventListener("DOMContentLoaded", getAccessKey);

        async function getAccessKey() {
            try {
                const parameter = {
                    method: "GET",
                    headers: {
                        "content-type": "application/json",
                    },
                };

                await fetch(`${hostURL}/api/v1/user/getAccessKey`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            } else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }
                        const accesskeyInput = document.querySelector(".capy-input-container input");
                        accesskeyInput.value = res.data.accessKey;
                    })
                    .catch((error) => {
                        show_message_pop(true, "Error on reading response from server.");
                    });
            } catch (error) {
                show_message_pop(true, "Error on sending request for getAccessKey.");
            }
        }

        async function generateAccessKey() {
            try {
                const parameter = {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                };

                await fetch(`${hostURL}/api/v1/user/generateAccessKey`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            } else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }

                        const message_head = document.querySelector(".head");
                        if (message_head) {
                            message_head.textContent = "Successful!";
                        }
                        const accesskeyInput = document.querySelector(".capy-input-container input");
                        accesskeyInput.value = res.data.accessKey;
                        show_message_pop(true, "New AccessKey generated successfully.");
                    })
                    .catch((error) => {
                        show_message_pop(true, "Error on reading response from server.");
                    })
                    .finally((e) => {
                        generate_btn.disabled = false;
                    });
            } catch (error) {
                show_message_pop(
                    true,
                    "Error on sending request for generateAccessKey."
                );
            }
        }

        // Logout-btn

        const logout_btn = document.querySelectorAll('.logout-btn button');

        if (logout_btn.length > 0) {
            logout_btn.forEach(e => {
                e.onclick = async (e) => {
                    console.log('logout button clicked! in logout button cb');
                    await logout();
                }
            });
        }

        async function logout() {
            try {
                const parameter = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                }

                await fetch(`${hostURL}/api/v1/user/signout`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            } else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }

                        location.href = '/'
                    })
                    .catch((error) => {
                        show_message_pop(true, "Error on reading response from server.");
                    })
            } catch (error) {
                show_message_pop(
                    true,
                    "Error on sending request to logout."
                );
            }
        }
    </script>
</body>

</html>