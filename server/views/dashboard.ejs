<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CapybaraComments - Dashboard</title>
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Capybara Downloader - Download youtube videos and audios and etc." />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="apple-touch-icon" sizes="180x180" href="favicon_io/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon_io/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon_io/favicon-16x16.png">
    <link rel="manifest" href="favicon_io/site.webmanifest">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="css/dashboard.css">
</head>

<body>

    <main class="flex-row d-flex justify-content-center align-items-center">
        <nav class="responsive-nav-bar-container">
            <span class="material-symbols-outlined menu-btn-respo">
                menu
            </span>
        </nav>

        <nav class="responsive-nav-bar">
            <div class="logo pt-5">Capybara</div>
            <ul class="navbar-list text-center">
                <li><a href="/home">Home</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/dashboard">Dashboard</a></li>
                <li><a href="/contact">Contact</a></li>
            </ul>
            <div class="logout-btn d-flex justify-content-center align-items-center pb-5">
                <button type="button">Logout</button>
                <span class="material-symbols-outlined">move_item</span>
            </div>
        </nav>

        <nav class="navigation-bar">
            <div class="logo pt-5">Capybara</div>
            <ul class="navbar-list text-center">
                <li><a href="/home">Home</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/dashboard">Dashboard</a></li>
                <li><a href="/contact">Contact</a></li>
            </ul>
            <div class="logout-btn d-flex justify-content-center align-items-center pb-5">
                <button type="button">Logout</button>
                <span class="material-symbols-outlined">move_item</span>
            </div>
        </nav>
        <section class="overflow-auto">
            <div class="requests-record-container d-flex justify-content-center align-items-center flex-column">
                <div class="download-records-container d-flex justify-content-center align-items-center flex-row">
                    <div
                        class="meter-chart first-row-charts d-flex justify-content-center align-items-center flex-column">
                        <div class="meter"></div>
                        <div class="chart-title">Successful Downloads</div>
                    </div>
                    <div
                        class="downloads-detail first-row-charts d-flex justify-content-center align-items-start flex-column">
                        <div class="request-details-container">
                            <div class="request-header">
                                Total requests sent
                            </div>
                            <div id="total_requests_sent" class="request-data-number">
                                0
                            </div>
                        </div>

                        <div class="request-details-container">
                            <div class="request-header">
                                Total requests succeed
                            </div>
                            <div id="total_requests_succeed" class="request-data-number">
                                0
                            </div>
                        </div>

                        <div class="request-details-container">
                            <div class="request-header">
                                Total requests failed
                            </div>
                            <div id="total_requests_failed" class="request-data-number">
                                0
                            </div>
                        </div>
                    </div>
                </div>
                <div class="download-date-chart-container d-flex justify-content-center align-items-center flex-column">
                    <div class="data-bars d-flex justify-content-start align-items-baseline flex-row">
                    </div>
                    <div class="data-bar-buttons d-flex justify-content-center align-items-end flex-row">
                        <button id="zoomin-btn" class="zoom-button">+</button>
                        <button id="zoomout-btn" class="zoom-button">-</button>
                    </div>
                </div>
            </div>
            <br><br><br>
            <div class="devicesContainer d-flex align-items-center justify-content-center flex-column p-5">
                <h2 class="text-start">Devices Using Your Access Token :</h2>

            </div>
        </section>
    </main>

    <div class="message-pop dis-none">
        <div class="cross-btn-container">
            <button type="button" class="cross-btn">âœ—</button>
        </div>
        <div class="message-pop-inner-container">
            <div class="head">Uh oh!</div>
            <div class="message"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
        </script>
    <script nonce="<%= nonce %>">
        const hostURL = 'http://localhost:5000'

        const menu_btn_respo = document.querySelector('.menu-btn-respo');
        const responsive_nav_bar = document.querySelector('.responsive-nav-bar');
        const responsive_nav_bar_container = document.querySelector('.responsive-nav-bar-container');

        if (menu_btn_respo) {
            menu_btn_respo.onclick = (e) => {
                if (responsive_nav_bar.style.display === 'none') {
                    responsive_nav_bar.style.display = 'flex';
                    responsive_nav_bar.style.top = '45px'
                    responsive_nav_bar_container.style.display = 'block';
                }
                else {
                    responsive_nav_bar.style.display = 'none';
                    responsive_nav_bar.style.top = '-9000px'
                    responsive_nav_bar_container.style.display = 'none';
                }
            }
        }

        const input = document.querySelector('.capy-input-container input');
        const generate_btn = document.getElementById('generate-btn');
        const copy_btn = document.querySelector('.copy-btn');

        if (copy_btn) {
            copy_btn.onclick = (e) => {
                input.select();
                document.execCommand("copy");
                alert("Copied to clipboard!");
            }
        }


        function addColorClassToAnchor() {
            const anchors = document.querySelectorAll('.navbar-list a');
            const currentUrl = window.location.pathname;

            anchors.forEach(anchor => {
                if (anchor.getAttribute('href') === currentUrl) {
                    anchor.classList.add('color-orange');
                }
            });
        }

        document.addEventListener('DOMContentLoaded', addColorClassToAnchor);
        document.addEventListener('DOMContentLoaded', getRequestData)
        document.addEventListener('DOMContentLoaded', getRequestsRecordData);
        document.addEventListener('DOMContentLoaded', getAccessTokenUsers);

        const message_pop = document.querySelector('.message-pop');
        const cross_btn = document.querySelector('.cross-btn');

        if (cross_btn) {
            cross_btn.addEventListener('click', (e) => {
                if (message_pop) { message_pop.classList.add('dis-none') }
            });
        }

        function show_message_pop(bool, msg = '') {
            if (bool) {
                message_pop.classList.remove('dis-none');
                const message = document.querySelector('.message');
                message.textContent = msg;
            }
            else {
                message_pop.classList.add('dis-none');
            }
        }


        async function getRequestData() {
            try {
                await fetch(`${hostURL}/api/v1/user/getTotalRequestsRecord`)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            }
                            else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }

                        const { totalRequests, succeedRequests, failedRequests } = res.data;
                        show_data_on_board(totalRequests, succeedRequests, failedRequests);

                    })
            } catch (error) {
                show_message_pop(
                    true,
                    "Error on fetching request records."
                );
                console.log(error);
            }
        }


        function show_data_on_board(totalRequests, succeedRequests, failedRequests) {
            const total_requests_sent = document.getElementById('total_requests_sent');
            const total_requests_failed = document.getElementById('total_requests_failed');
            const total_requests_succeed = document.getElementById('total_requests_succeed');

            if (total_requests_failed && total_requests_sent && total_requests_succeed) {
                total_requests_sent.textContent = totalRequests;
                total_requests_failed.textContent = failedRequests;
                total_requests_succeed.textContent = succeedRequests;

                // Calculate the percentage and display it.
                var percentage = Math.floor((succeedRequests / totalRequests) * 100);
                document.querySelector('.meter').setAttribute('meter-level', `${percentage}%`);
                document.documentElement.style.setProperty('--meter-level-percentage', percentage + '%');

                if (percentage >= 10) {
                    document.documentElement.style.setProperty('--meter-shine-level', '11%');
                }
            }
        }

        // Zoom in and out button
        const zoomin = document.getElementById('zoomin-btn');
        const zoomout = document.getElementById('zoomout-btn');

        if (zoomin && zoomout) {
            zoomin.onclick = (e) => {
                set_Single_Bar_Width('increase', 10);
            }

            zoomout.onclick = (e) => {
                set_Single_Bar_Width('decrease', 10);
            }
        }

        function set_Single_Bar_Width(operation = 'increase', by) {
            let style = getComputedStyle(document.documentElement);
            let size = style.getPropertyValue('--single-bar-size').trim();
            let number = Number(size.match(/\d+\.?\d*/g));

            if (number < 100 && operation === 'increase') {
                document.documentElement.style.setProperty('--single-bar-size', `${number += by}px`);
                return;
            }
            else if (number > 10 && operation === 'decrease') {
                document.documentElement.style.setProperty('--single-bar-size', `${number -= by}px`);
                return;
            }
        }


        function populateBars(data) {
            const data_bars = document.querySelector('.data-bars');

            for (const key in data) {
                if (Object.hasOwnProperty.call(data, key)) {
                    const value = data[key];
                    const single_bar = document.createElement('div');
                    single_bar.classList.add('single-bar');
                    single_bar.style.height = `${10 * value.request}px`;
                    single_bar.setAttribute('data-toggle', 'tooltip');
                    single_bar.title = `req:${value.request}, ${key}`

                    data_bars.append(single_bar);
                }
            }
        }


        async function getRequestsRecordData() {
            try {
                await fetch(`${hostURL}/api/v1/user/getRequestsRecordData`)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            }
                            else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }
                        populateBars(res.data);
                    })
            } catch (error) {
                show_message_pop(
                    true,
                    "Error on fetching request records data."
                );
                console.log(error);
            }
        }


        async function getAccessTokenUsers() {
            try {
                await fetch(`${hostURL}/api/v1/user/getAccessTokenUsers`)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            }
                            else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }
                        populateDevicesContainer(res.data);
                    })
            } catch (error) {
                show_message_pop(
                    true,
                    "Error on fetching access token users."
                );
                console.log(error);
            }
        }


        function populateDevicesContainer(devices) {
            const devicesContainer = document.querySelector('.devicesContainer');

            devices.forEach((device) => {
                const device_name = document.createElement('div');
                device_name.classList.add('device-detail-box');

                const html = `
                    <div class="device-name">
                        <span>Device Name :</span>
                    <div class="user-device">${device.deviceType}</div>
                    </div>
                    <div class="os_name">
                        <span>OS Name :</span>
                    <div class="user-os-name">${device.OS_Name}</div>
                    </div>
                `
                device_name.innerHTML = html;
                devicesContainer.append(device_name);
            })
        }

        // Logout-btn
        const logout_btn = document.querySelectorAll('.logout-btn button');

        if (logout_btn.length > 0) {
            logout_btn.forEach(e => {
                e.onclick = async (e) => {
                    console.log('logout button clicked! in logout button cb');
                    await logout();
                }
            });
        }

        async function logout() {
            try {
                const parameter = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                }

                await fetch(`${hostURL}/api/v1/user/signout`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            } else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }

                        location.href = '/'
                    })
                    .catch((error) => {
                        show_message_pop(true, "Error on reading response from server.");
                    })
            } catch (error) {
                show_message_pop(
                    true,
                    "Error on sending request to logout."
                );
                console.log(error);
            }
        }

    </script>
</body>

</html>