<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CapybaraComments - forget-password</title>
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Capybara Downloader - Download youtube videos and audios and etc." />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="apple-touch-icon" sizes="180x180" href="favicon_io/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon_io/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon_io/favicon-16x16.png">
    <link rel="manifest" href="favicon_io/site.webmanifest">
    <link rel="stylesheet" href="css/forgetPasswordVerifyEmail.ejs">
</head>

<body>

    <div class="container login-container">
        <div class="verificationCard flex-column-and-centered">
            <h1>Forget Password?</h1>
            <p class='verificationCardMessage'>
                Please enter the verification code that<br />has been sent to your email address
            </p>
            <form id="email-verifying-form" class="flex-column-and-centered">
                <div class="verification-code-inputs">
                    <input type="text" class="inputBoxes ta-center" id="inputBox1" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox2" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox3" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox4" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox5" maxlength="1" minlength="1" required>
                    <input type="text" class="inputBoxes ta-center" id="inputBox6" maxlength="1" minlength="1" required>
                </div>
                <button type='submit' class='verifyBtn'>Verify</button>
            </form>

            <div class='vc-form-footer d-flex flex-row justify-content-center align-items-center'>
                <button type="button" id="goBackBtn" class='forget-password-form-footer-btn text-decoration-none'>Go
                    Back</button>
            </div>
        </div>

    </div>

    <div class="message-pop dis-none">
        <div class="cross-btn-container">
            <button type="button" class="cross-btn">âœ—</button>
        </div>
        <div class="message-pop-inner-container">
            <div class="head">Uh oh!</div>
            <div class="message"></div>
        </div>
    </div>

    <div class="loading-window dis-none">
        <div class="loading-window-img-container">
            <span class="loader"></span>
        </div>
        <div class="loading-window-heading">
            <h1>Purr Purr Loading...</h1>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
        </script>

    <script nonce="<%= nonce %>">
        const hostURL = 'http://localhost:5000'

        const message_pop = document.querySelector('.message-pop');
        const cross_btn = document.querySelector('.cross-btn');


        if (cross_btn) {
            cross_btn.addEventListener('click', (e) => {
                if (message_pop) { message_pop.classList.add('dis-none') }
            });
        }


        function show_loading_window(bool) {
            const loading_window = document.querySelector('.loading-window');

            if (bool) {
                loading_window.classList.remove('dis-none');
            }
            else {
                loading_window.classList.add('dis-none');
            }
        }

        function show_message_pop(bool, msg = '') {
            if (bool) {
                message_pop.classList.remove('dis-none');
                const message = document.querySelector('.message');
                message.textContent = msg;
            }
            else {
                message_pop.classList.add('dis-none');
            }
        }


        const verifyBtn = document.querySelector('.verifyBtn');
        if (verifyBtn) {
            verifyBtn.addEventListener('mousedown', (e) => {
                const root = document.querySelector(':root');
                root.style.setProperty('--scale', '0.9');
            })

            verifyBtn.addEventListener('mouseup', (e) => {
                const root = document.querySelector(':root');
                root.style.setProperty('--scale', '1');
            })
        }

        const inputBoxes = document.querySelectorAll('.inputBoxes');
        if (inputBoxes) {
            inputBoxes.forEach(function (inputBox, index) {
                inputBox.addEventListener('paste', function (e) {
                    e.preventDefault();
                    const pastedText = e.clipboardData.getData('text');
                    console.log(pastedText);
                    distributeCode(pastedText);
                });

                inputBox.addEventListener('input', function (e) {
                    handleInput(e.target, index);
                });
            });

            function distributeCode(code) {
                // Distribute the code among the input boxes
                for (let i = 0; i < inputBoxes.length; i++) {
                    inputBoxes[i].value = code[i] || '';
                }

                // Move cursor to the next input box
                const nextIndex = currentIndex + 1;
                if (nextIndex < inputBoxes.length) {
                    inputBoxes[nextIndex].focus();
                }
            }

            function handleInput(inputBox, currentIndex) {
                // Move cursor to the next input box after typing
                const nextIndex = currentIndex + 1;
                if (nextIndex < inputBoxes.length && inputBox.value) {
                    inputBoxes[nextIndex].focus();
                }
            }
        }

        const goBackBtn = document.getElementById('goBackBtn');
        if (goBackBtn) {
            goBackBtn.addEventListener('click', (e) => {
                window.location.href = "/forgetPassword"
            });
        }


        const email_verifying_form = document.getElementById('email-verifying-form');

        if (email_verifying_form) {
            email_verifying_form.addEventListener('submit', async (e) => {
                e.preventDefault();

                let code = '';
                document.querySelectorAll('.inputBoxes').forEach((ele) => {
                    code += ele.value;
                });
                await sendEmailVerification(code);
            })
        }

        async function sendEmailVerification(verificationCode) {
            if (!verificationCode) {
                show_message_pop(true, 'Code is not provided. Please enter valid verification code');
                return;
            }

            try {
                const parameter = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        "verificationCode": verificationCode
                    })
                }

                await fetch(`${hostURL}/api/v1/auth/verifyEmailToChangePassword`, parameter)
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.error) {
                            if (res.error.constructor === Array) {
                                show_message_pop(true, res.error[0].msg);
                                return;
                            }
                            else {
                                show_message_pop(true, res.error.msg);
                                return;
                            }
                        }
                        window.location.href = '/home';

                    }).catch((error) => {
                        show_message_pop(true, 'Error on reading response from server.');
                        console.log('verifyEmail:', error);
                    }).finally(()=>{
                        show_loading_window(false);
                    });

            } catch (error) {
                show_message_pop(true, 'Error on sending request for verifyEmail.');
                console.log('verifyEmail:', error);
            }
        }

    </script>
</body>

</html>